<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Bullhead</title>
    <link>https://blog.diudiu.love/tags/golang/</link>
    <description>Recent content in Golang on Bullhead</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Apr 2022 09:56:44 +0800</lastBuildDate><atom:link href="https://blog.diudiu.love/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>channel实现</title>
      <link>https://blog.diudiu.love/post/golang/channel/</link>
      <pubDate>Sat, 02 Apr 2022 09:56:44 +0800</pubDate>
      
      <guid>https://blog.diudiu.love/post/golang/channel/</guid>
      <description>底层结构 ch :=make(chan int ,5),因为channle 是引用类型，所以 make ，然后 ch（在栈）存的是一个指针地址，指针指向 堆上的hChan结构体，
hchan结构体包含如下结构
type hchan struct {  qcount uint // total data in the queue	//缓冲区已经存了多少个元素  dataqsiz uint // size of the circular queue	//环形队列的大小  buf unsafe.Pointer // points to an array of dataqsiz elements 缓冲区在内存的指针位置（一个数组）  elemsize uint16	//	//每个元素占多大空间  closed uint32	//	关闭状态  elemtype *_type // element type	//通道中的元素类型 指向类型指针  sendx uint // send index	//	目前数组里写的下表  recvx uint // receive index	//	目前数组里读的下表  recvq waitq // list of recv waiters	//读的等待队列	 sendq waitq // list of send waiters	//写的等待队列	sudog   // lock protects all fields in hchan, as well as several  // fields in sudogs blocked on this channel.</description>
    </item>
    
    <item>
      <title>Golang的GC垃圾回收机制？</title>
      <link>https://blog.diudiu.love/post/golang/gc/</link>
      <pubDate>Sat, 02 Apr 2022 09:56:44 +0800</pubDate>
      
      <guid>https://blog.diudiu.love/post/golang/gc/</guid>
      <description>堆和栈 栈是静态的，程序一启动就确定了，堆是动态的。运行的时候会变化
栈stack(快，省心，但不灵活) 在编译时就知道其内容/大小的数据，这部分数据直接被编译在了的可执行文件 中。 由CP U管理。每声明一个新变量，它就会被推入栈，当作用域函数/程序退出时 被释放。 栈会先进后出的顺序来存储（堆放盘子），向栈上推入的数据位置永远处于栈的 顶端，无需找新的数据存储位置，可以高效、快速的读写。 缺点1：无法存放编译时不知道大小的数据。
3。2堆heap(灵活，但没栈省心，没栈快) 由程序管理（(GC/程序员/计数器…)。 编译无法确定大小的数据，将存储在堆中，比如用户输入的文字。 程序根据需要请求特定大小的空间，操作系统找一块足够大且可用空间，把这 片空间的地址返回给程序。 缺点1：需要花时间来记录协调分配。 缺点2：需要跳转，跳转次数越多越慢。 缺点3：数据排布稀疏。
标记清除法 程序去扫描所有的对象，查找到所有可达的对象，然后做标记。 然后stw（stop the word，暂停程序），然后sweep掉所有的对象，
缺点： STW 会导致程序卡顿
需要扫描整个heap（堆栈）
清楚的时候会产生碎片
三色标记 白灰黑三种颜色标记表 第一步：程序创建的时候 所有的对象都是白色
第二步：GC开始的时候 根结点遍历所有的对象， 查找到的对象列为灰色，
第三步：遍历灰色的集合，将灰色对象引用的白色改成灰色，将自己改成黑色
第四步：重复第三步，直到没有灰色对象。
第五步：回收所有的白色
如果不被STW 保护 条件1：一个白色对象被黑色对象引用 (白色被挂在黑色下) 条件2：灰色对象与它之间的可达关系的白色对象遭到破坏 (灰色同时丢了该白色)
强三色不变式 破坏条件一，黑色不允许运用白色
弱三色不变式 破坏条件二，黑色可以引用白色，但是这个白色的上游链路必须被灰色引用。
屏障机制 插入屏障 不在栈上使用 具体操作：在A对象引用B对象的时候，B对象被标记为灰色。（将B挂在A下游，B必须被标记为灰色） 满足：强三色不变式。（不存在黑色对象引用白色对象的情况了，因为白色会强制变成灰色）
在准备回收白色前，重新遍历扫描一次栈空间。 此时加STW暂停保护栈，防止外界干扰（有新的白色被黑色添加）
不足 结束时需要STW来重新扫描栈，大约需要10~100ms
删除屏障 具体操作: 被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。
满足: 弱三色不变式. (保护灰色对象到白色对象的路径不会断)
混合写屏障 1、GC开始将栈上的对象全部扫描并标记为黑色(之后不再进行第二次重复扫描，无需STW)，
2、GC期间，任何在栈上创建的新对象，均为黑色。
3、被删除的对象标记为灰色。
4、被添加的对象标记为灰色。
满足: 变形的弱三色不变式.</description>
    </item>
    
    <item>
      <title>什么是GMP？</title>
      <link>https://blog.diudiu.love/post/golang/gmp/</link>
      <pubDate>Sat, 02 Apr 2022 09:56:44 +0800</pubDate>
      
      <guid>https://blog.diudiu.love/post/golang/gmp/</guid>
      <description>GMP 基本含义 G对应一个goroutine
M 对应CPU的物理线程，由内核态管理
P一般和M一一对应，P里面存储当前go routine的上下文环境
P的个数是通过runtime.GOMAXPROCS设定(最大256),Go1.5版本之后默认为物理线程数。在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。
一个线程执行一个P
M共经历三个过程：先从本地队列找，定期会从全局队列找，最后实在没办法，就去别的 P 偷。如下图所示：
设计策略 复用线程 workstealing机制 如果M2线程本地协程队列空了，去M1偷一个过来，然后去全局队列拿，如果都没了，就睡眠或者销毁
hand off机制 如果M1线程的某个Goroutine G1阻塞了（比如read文件），内核态启动一个新的M2，把M1剩下的G，G2,G3放到这个新的M线程里，
G1如果在阻塞，M1就睡眠，G1执行完之后，去到别M下，M1自己销毁。
利用并行 设置GOMAXPROCS
抢占策略 一个G和一个CPU最多的链接时间10MS，别的G会去占用
全局队列 先从别的P偷，别的P没了再去全局队列偷，偷之前先上锁，偷完解锁。
调度流程 1.go func创建 一个g
2.加入本地队列M1，如果满了，放到全局里
3.M会从P的队列里拿一个G来之行，如果一个P里面空了，就去别的M P偷一个，如果别的没有，去拿全局。
4.M调度G是一个循环过程，直到把G执行完
5.如果阻塞了执行 handoff机制
如果本地G队列满了，新加一个G，二分法队列，将前面的G和新加的G打散放入全局
自旋队列 省去上下文的开销</description>
    </item>
    
    <item>
      <title>重复打印1和2</title>
      <link>https://blog.diudiu.love/post/golang/repeatprint/</link>
      <pubDate>Sat, 02 Apr 2022 09:56:44 +0800</pubDate>
      
      <guid>https://blog.diudiu.love/post/golang/repeatprint/</guid>
      <description>使用channel按顺序重复打印1和2
package main  import ( 	&amp;#34;fmt&amp;#34; )  func main() { 	ch1 := make(chan bool, 1) 	ch2 := make(chan bool) 	Exit := make(chan bool) 	go func() { 	for { 	if ok := &amp;lt;-ch1; ok { 	fmt.Println(1) 	ch2 &amp;lt;- true 	} 	} 	}()  	go func() { 	defer func() { 	close(Exit) 	}() 	for { 	if ok := &amp;lt;-ch2; ok { 	fmt.</description>
    </item>
    
  </channel>
</rss>
